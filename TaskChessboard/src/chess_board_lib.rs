/* automatically generated by rust-bindgen 0.59.1 */

#![allow(warnings)]

#[repr(C)]
#[derive(Debug)]
pub struct AccessApi {
    pub m_board: *mut ::std::os::raw::c_char,
    pub m_allocated: bool,
}
#[test]
fn bindgen_test_layout_AccessApi() {
    assert_eq!(
        ::std::mem::size_of::<AccessApi>(),
        16usize,
        concat!("Size of: ", stringify!(AccessApi))
    );
    assert_eq!(
        ::std::mem::align_of::<AccessApi>(),
        8usize,
        concat!("Alignment of ", stringify!(AccessApi))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AccessApi>())).m_board as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AccessApi),
            "::",
            stringify!(m_board)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AccessApi>())).m_allocated as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AccessApi),
            "::",
            stringify!(m_allocated)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN9AccessApi14get_chessboardEii"]
    pub fn AccessApi_get_chessboard(
        this: *mut AccessApi,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN9AccessApiC1Ev"]
    pub fn AccessApi_AccessApi(this: *mut AccessApi);
}
extern "C" {
    #[link_name = "\u{1}_ZN9AccessApiD1Ev"]
    pub fn AccessApi_AccessApi_destructor(this: *mut AccessApi);
}
impl AccessApi {
    #[inline]
    pub unsafe fn get_chessboard(
        &mut self,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        AccessApi_get_chessboard(self, width, height)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        AccessApi_AccessApi(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        AccessApi_AccessApi_destructor(self)
    }
}
