/* automatically generated by rust-bindgen 0.59.1 */

#![allow(warnings)]

#[repr(C)]
#[derive(Debug)]
pub struct TrianglesApi {
    pub m_user_dialog: *mut ::std::os::raw::c_void,
    pub m_last_table: *mut ::std::os::raw::c_char,
    pub m_created_triangles: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_TrianglesApi() {
    assert_eq!(
        ::std::mem::size_of::<TrianglesApi>(),
        24usize,
        concat!("Size of: ", stringify!(TrianglesApi))
    );
    assert_eq!(
        ::std::mem::align_of::<TrianglesApi>(),
        8usize,
        concat!("Alignment of ", stringify!(TrianglesApi))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TrianglesApi>())).m_user_dialog as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TrianglesApi),
            "::",
            stringify!(m_user_dialog)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TrianglesApi>())).m_last_table as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TrianglesApi),
            "::",
            stringify!(m_last_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TrianglesApi>())).m_created_triangles as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TrianglesApi),
            "::",
            stringify!(m_created_triangles)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK12TrianglesApi8AskStartEv"]
    pub fn TrianglesApi_AskStart(this: *const TrianglesApi) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN12TrianglesApi11AskTriangleEv"]
    pub fn TrianglesApi_AskTriangle(this: *mut TrianglesApi);
}
extern "C" {
    #[link_name = "\u{1}_ZN12TrianglesApi18FormTrianglesTableEv"]
    pub fn TrianglesApi_FormTrianglesTable(this: *mut TrianglesApi) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN12TrianglesApi11GetTriangleEPKc"]
    pub fn TrianglesApi_GetTriangle(
        this: *mut TrianglesApi,
        tr_args: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_ZN12TrianglesApi11AddTriangleEPKv"]
    pub fn TrianglesApi_AddTriangle(
        this: *mut TrianglesApi,
        triangle: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12TrianglesApiC1Ev"]
    pub fn TrianglesApi_TrianglesApi(this: *mut TrianglesApi);
}
extern "C" {
    #[link_name = "\u{1}_ZN12TrianglesApiD1Ev"]
    pub fn TrianglesApi_TrianglesApi_destructor(this: *mut TrianglesApi);
}
impl TrianglesApi {
    #[inline]
    pub unsafe fn AskStart(&self) -> bool {
        TrianglesApi_AskStart(self)
    }
    #[inline]
    pub unsafe fn AskTriangle(&mut self) {
        TrianglesApi_AskTriangle(self)
    }
    #[inline]
    pub unsafe fn FormTrianglesTable(&mut self) -> *mut ::std::os::raw::c_char {
        TrianglesApi_FormTrianglesTable(self)
    }
    #[inline]
    pub unsafe fn GetTriangle(
        &mut self,
        tr_args: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void {
        TrianglesApi_GetTriangle(self, tr_args)
    }
    #[inline]
    pub unsafe fn AddTriangle(&mut self, triangle: *const ::std::os::raw::c_void) {
        TrianglesApi_AddTriangle(self, triangle)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        TrianglesApi_TrianglesApi(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        TrianglesApi_TrianglesApi_destructor(self)
    }
}
